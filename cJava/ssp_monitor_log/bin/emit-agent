#!/bin/bash
################################
# app directory layout
#  ./
#  |- bin/javarun #bash files
#  |- *.jar       #your jar files
#  |- conf/       #config files
#  |- lib/        #dependency jars
################################
################################
# config
################################
# JAVA_HOME=
#JAVA_OPTS="-Xmx1024m"
#JAVA_HOME=/opt/java/default

#JAVA_OPTS="-server -Xmx1g -Xms1g -Xmn512m -Xss256k"
#JAVA_OPTS="${JAVA_OPTS} -XX:SurvivorRatio=4 -XX:TargetSurvivorRatio=90 -XX:MaxTenuringThreshold=31 -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintTenuringDistribution -Xloggc:/opt/logs/gc.log"
#CMS_OPTS="-XX:+UseConcMarkSweepGC -XX:+UseParNewGC -XX:ParallelGCThreads=20 -XX:+CMSIncrementalMode "
#G1_OPTS="-XX:+UnlockExperimentalVMOptions -XX:+UseG1GC -XX:MaxGCPauseMillis=100 -XX:GCPauseIntervalMillis=200 -XX:MaxTenuringThreshold=30   -XX:ParallelGCThreads=40"
#JAVA_OPTS="${JAVA_OPTS} ${G1_OPTS}"
# PID_DIR=/tmp
# LOG_DIR=/tmp
# APP_NICENESS=0
# MONITORLOG_DIR
APP_NAME="agent"

ulimit -n 1002400

################################
# setup java env
################################
this="${BASH_SOURCE-$0}"
bin=`dirname "$0"`
bin=`cd "$bin"; pwd`
APP_HOME=`dirname "$bin"`
ROOT_LOGGER=INFO,DRFA

if [ -z "${JAVA_HOME}" ]; then
  echo "Error: JAVA_HOME is not set."
  exit 1
fi
JAVA=${JAVA_HOME}/bin/java

# add conf to classpath
if [ -e "${APP_HOME}/conf" ]; then
	CLASSPATH="${APP_HOME}/conf"
fi
CLASSPATH=${CLASSPATH}:$JAVA_HOME/lib/tools.jar
#add app home jars
for f in $APP_HOME/*.jar; do
   CLASSPATH=${CLASSPATH}:$f;
done
#add app lib jars
for f in $APP_HOME/lib/*.jar; do
   CLASSPATH=${CLASSPATH}:$f;
done

#logdir
if [ -z "${LOG_DIR}" ]; then
  LOG_DIR=${APP_HOME}/logs
fi
mkdir -p "${LOG_DIR}"


#piddir
if [ -z "${PID_DIR}" ]; then
  PID_DIR=${APP_HOME}/pids
fi
if [ "x$APP_NICENESS" = "x" ]; then
    APP_NICENESS=0
fi
################################
# common functions
################################
function usage
{
echo "Usage: ${APP_NAME} [start|stop] <command>"
echo "commands:"
echo "  collector   the log service."
echo "  emit       emit log program."
echo "  help        print usage."
echo "OR"
echo "  CLASSNAME"
exit 1
}
function cmdtoclass
{
	if [ "${1}" = "emit" ] ; then
		echo "com.youku.shark.emitor.SharkEmitor"
	elif [ "${1}" = "help" ] ; then
		usage
	elif [ "${1/./}" != "${1}" ] ; then
		echo "${1}"
	fi
}
function rotate_log
{
    log=$1;
    num=5;
    if [ -n "$2" ]; then
        num=$2
    fi
    if [ -f "$log" ]; then # rotate logs
        while [ $num -gt 1 ]; do
            prev=`expr $num - 1`
            [ -f "$log.$prev" ] && mv "$log.$prev" "$log.$num"
            num=$prev
        done
        mv "$log" "$log.$num";
    fi
}

function start_stop
{
	startStop=$1
	shift
	command=$1
	shift
	pid=${PID_DIR}/${APP_NAME}-${command}-${USER}.pid
	log=${LOG_DIR}/${APP_NAME}-${command}.out
	
	case $startStop in

	  (start)
	    mkdir -p "${PID_DIR}"
	
	    if [ -f $pid ]; then
	      if kill -0 `cat $pid` > /dev/null 2>&1; then
	        echo $command running as process `cat $pid`.  Stop it first.
	        exit 1
	      fi
	    fi
	    
	    rotate_log "${log}"
	    echo starting $command, logging to $log
	    #cd "$APP_HOME"
	    nohup nice -n $APP_NICENESS "${this}" $command "$@" > "$log" 2>&1 < /dev/null &
	    echo $! > $pid
	    sleep 1; head "$log"
	    ;;
	
	  (stop)
	
	    if [ -f $pid ]; then
	      if kill -0 `cat $pid` > /dev/null 2>&1; then
	        echo stopping $command
	        kill `cat $pid`
	      else
	        echo no $command to stop
	      fi
	    else
	      echo no $command to stop
	    fi
	    ;;
	
	  (*)
	    echo "not support $startStop"
	    exit 1
	    ;;
	
	esac
}
################################
# program main here
################################

# if no args specified, show usage
if [ $# -lt 1 ]; then
	usage
fi
# get arguments
CMD=$1
shift

if [ "${CMD}" = "start" ] || [ "${CMD}" = "stop" ]; then
	startOrStop=${CMD}
	# if no args specified, show usage
	if [ $# -lt 1 ]; then
		usage
	fi
	# get arguments
	CMD=$1
	shift
	# check command
	CLASS=$(cmdtoclass ${CMD})
	if [ "x${CLASS}" = "x" ]; then
		usage
	fi
	start_stop ${startOrStop} ${CMD} "$@"
else
	# check command
	CLASS=$(cmdtoclass ${CMD})
	if [ "x${CLASS}" = "x" ]; then
		usage
	fi
	#add logdir and logfile to opts
	JAVA_OPTS="-Dapp.home=$APP_HOME -Dlog.dir=$LOG_DIR -Dlog.file=${APP_NAME}-${CMD}.log -Dlog.root.logger=${ROOT_LOGGER:-INFO,console}"
        if [ "${CMD}" = "emit" ]; then
         JAVA_OPTS="-Xmx1g -XX:+UseConcMarkSweepGC -Xss256k $JAVA_OPTS"
        fi
        exec "$JAVA" -Dproc_$CMD $JAVA_OPTS -classpath "$CLASSPATH" $CLASS "$@"
fi


